{"version":3,"file":"NegociacaoService.js","names":["HttpService","ConnectionFactory","Negociacao","NegociacaoDao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","objeto","Date","data","quantidade","valor","erro","console","log","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"sources":["../../app-es6/services/NegociacaoService.js"],"sourcesContent":["import { HttpService } from \"./HttpService.js\";\r\nimport { ConnectionFactory } from \"./ConnectionFactory.js\";\r\nimport { Negociacao } from \"../models/Negociacao.js\";\r\nimport { NegociacaoDao } from \"../dao/NegociacaoDao.js\";\r\n\r\nexport class NegociacaoService {\r\n\r\n        constructor(){\r\n          this._http = new HttpService();\r\n        }\r\n\r\n          obterNegociacoesDaSemana() {\r\n\r\n              return new Promise((resolve, reject) => {\r\n                  this._http.get('negociacoes/semana')\r\n                  .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                  }).catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível receber as negociações da semana')\r\n                  })\r\n          });\r\n        }\r\n        \r\n          obterNegociacoesDaSemanaAnterior() {\r\n\r\n              return new Promise((resolve, reject) => {\r\n                this._http.get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                  resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                }).catch(erro => {\r\n                  console.log(erro);\r\n                  reject('Não foi possível receber as negociações da semana')\r\n                })\r\n            });\r\n\r\n        }\r\n\r\n    \r\n          obterNegociacoesDaSemanaRetrasada() {\r\n\r\n              return new Promise((resolve, reject) => {\r\n                this._http.get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                  resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                }).catch(erro => {\r\n                  console.log(erro);\r\n                  reject('Não foi possível receber as negociações da semana')\r\n                })\r\n            });\r\n\r\n      }\r\n\r\n          async obterNegociacoes() {\r\n        \r\n            try {\r\n              const periodos = await Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada()\r\n              ]);\r\n              let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n              return negociacoes;\r\n            } catch (erro) {\r\n              throw new Error(erro);\r\n            }\r\n      } \r\n\r\n\r\n        async cadastra(negociacao) {\r\n            \r\n              return ConnectionFactory\r\n                      .getConnection()\r\n                      .then(connection => new NegociacaoDao(connection))\r\n                      .then(dao => dao.adiciona(negociacao))\r\n                      .then(()=>'Negociação adiciona com sucesso')\r\n                      .catch(erro =>{\r\n                          console.log(erro)\r\n                          throw new Error('Erro ao adicionar a negociação')\r\n                      });\r\n      }\r\n\r\n        async lista(){\r\n            return ConnectionFactory\r\n                      .getConnection()\r\n                      .then(connection => new NegociacaoDao(connection))\r\n                      .then(dao => dao.listaTodos())\r\n                      .then(()=>'Negociação adiciona com sucesso')\r\n                      .catch(erro =>{\r\n                          console.log(erro)\r\n                          throw new Error('Não foi possível listar as negociações')\r\n                      });\r\n      }\r\n\r\n        async  apaga(){\r\n            return ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.apagaTodos())\r\n                    .then(() => 'Negociações apagadas com sucesso')\r\n                    .catch(erro =>{\r\n                        console.log(erro)\r\n                        throw new Error('Não foi possível apagar as negociações')\r\n                    })\r\n\r\n      }\r\n\r\n          async importa(listaAtual) {\r\n\r\n            return this.obterNegociacoes()\r\n                      .then(negociacoes =>\r\n                            negociacoes.filter(negociacao => \r\n                                !listaAtual.some(negociacaoExistente =>\r\n                                    negociacao.isEquals(negociacaoExistente)))\r\n                      ).catch(erro => {\r\n                        console.log(erro);\r\n                        throw new Error('Não foi possível importas as negociações')\r\n                      });\r\n      \r\n      }\r\n\r\n}\r\n"],"mappings":"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"}